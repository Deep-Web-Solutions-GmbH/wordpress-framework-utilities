<?php

namespace DeepWebSolutions\Framework\Utilities\Dependencies\Checkers;

use DeepWebSolutions\Framework\Utilities\Dependencies\DependenciesCheckerInterface;
use DeepWebSolutions\Framework\Utilities\Dependencies\DependenciesHandlerInterface;

defined( 'ABSPATH' ) || exit;

/**
 * Checks the status of a set of dependencies.
 *
 * @since   1.0.0
 * @version 1.0.0
 * @package DeepWebSolutions\WP-Framework\Utilities\Dependencies\Checkers
 */
class HandlerChecker implements DependenciesCheckerInterface {
	// region FIELDS AND CONSTANTS

	/**
	 * Collection of handlers to check.
	 *
	 * @since   1.0.0
	 * @version 1.0.0
	 *
	 * @var     DependenciesHandlerInterface[]
	 */
	protected array $handlers;

	// endregion

	// region MAGIC METHODS

	/**
	 * DependenciesChecker constructor.
	 *
	 * @since   1.0.0
	 * @version 1.0.0
	 *
	 * @param   array   $handlers   Collection of handlers to check.
	 */
	public function __construct( array $handlers = array() ) {
		$this->set_handlers( $handlers );
	}

	// endregion

	// region GETTERS

	/**
	 * Returns a collection of dependencies checked by each registered handler.
	 *
	 * @since   1.0.0
	 * @version 1.0.0
	 *
	 * @return  array
	 */
	public function get_dependencies(): array {
		return $this->walk_handlers( 'get_dependencies' );
	}

	/**
	 * Returns the list of handlers to check.
	 *
	 * @since   1.0.0
	 * @version 1.0.0
	 *
	 * @return  DependenciesHandlerInterface[]
	 */
	public function get_handlers(): array {
		return $this->handlers;
	}

	// endregion

	// region SETTERS

	/**
	 * Sets the list of handlers to check.
	 *
	 * @since   1.0.0
	 * @version 1.0.0
	 *
	 * @param   array   $handlers   Collection of handlers to check.
	 *
	 * @return  $this
	 */
	public function set_handlers( array $handlers ): HandlerChecker {
		$this->handlers = array();

		foreach ( $handlers as $handler ) {
			if ( $handler instanceof DependenciesHandlerInterface ) {
				$this->handlers[] = $handler;
			}
		}

		return $this;
	}

	// endregion

	// region METHODS

	/**
	 * Adds a handler to the list of handlers to check.
	 *
	 * @since   1.0.0
	 * @version 1.0.0
	 *
	 * @param   DependenciesHandlerInterface    $handler    Handler to add.
	 *
	 * @return  $this
	 */
	public function register_handler( DependenciesHandlerInterface $handler ): HandlerChecker {
		$this->handlers[] = $handler;
		return $this;
	}

	/**
	 * Returns a collection of dependencies unfulfilled for each registered handler.
	 *
	 * @since   1.0.0
	 * @version 1.0.0
	 *
	 * @return  array
	 */
	public function get_missing_dependencies(): array {
		return $this->walk_handlers( 'get_missing_dependencies' );
	}

	/**
	 * Returns a collection of booleans representing whether the dependencies
	 * registered with each handler are fulfilled or not.
	 *
	 * @since   1.0.0
	 * @version 1.0.0
	 *
	 * @return  array
	 */
	public function are_dependencies_fulfilled(): array {
		return $this->walk_handlers( 'are_dependencies_fulfilled' );
	}

	// endregion

	// region HELPERS

	/**
	 * Walks over all registered handlers and compiles an array of results generated by calling a method on each of them.
	 *
	 * @since   1.0.0
	 * @version 1.0.0
	 *
	 * @param   string  $method     Method to call on each handler to get the result.
	 *
	 * @return  array
	 */
	protected function walk_handlers( string $method ): array {
		$result = array();

		foreach ( $this->handlers as $handler ) {
			$handler_type = $handler->get_dependency_type();
			$handler_name = $handler->get_name();

			$result[ $handler_type ]                  = $result[ $handler_type ] ?? array();
			$result[ $handler_type ][ $handler_name ] = method_exists( $handler, $method ) ? call_user_func( array( $handler, $method ) ) : null;
		}

		return $result;
	}

	// endregion
}
